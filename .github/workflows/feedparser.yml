name: "feedparser"

on: [push, pull_request]

jobs:
  code:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os}}"

    runs-on: "${{ matrix.os }}"

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "pypy3"
        exclude:
          - os: windows-latest
            python-version: "pypy3"
      fail-fast: false

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache virtual environment
        id: cache
        uses: actions/cache@v2
        with:
          path: venv
          key: "venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}"

      - name: Create virtual environment
        if: |
          (startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS'))
          && steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry update

      - name: Create virtual environment
        if: |
          startsWith(runner.os, 'Windows')
          && steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          .\venv\scripts\activate.ps1
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry update

      - name: Run tox (*nix)
        if: (startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS'))
        run: |
          source venv/bin/activate
          tox -e py,py-chardet

      - name: Run tox (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          .\venv\scripts\activate.ps1
          tox -e py,py-chardet

      - name: Run tox (mypy)
        if: startsWith(runner.os, 'Linux') && ${{ runner.python-version }} == '3.9'
        run: |
          source venv/bin/activate
          tox -e mypy

  docs:
    name: "Build documentation"

    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Cache virtual environment
        id: cache
        uses: actions/cache@v2
        with:
          path: venv
          key: "venv-${{ hashFiles('pyproject.toml') }}"


      - name: Create virtual environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry update

      - name: Test building the documentation
        run: |
          source venv/bin/activate
          tox -e docs
